% This is an experimental portion, not yet included in the Makefile and
%  hence not in the packageero), 
a function to compute the matrix exponential and another to
compute the derivative. 
The result of the latter will be an array with one slice for each active
element. 

An important source for creating this set of functions was the maxima package
for symbolic algebra.  The inspiration for the routine, and an excellent
set of checks for it, is the analyticp.c routine in the msm package.  The
latter contains matrix exponentials but not deriviatives, otherwise I would
have simply copied it wholesale.
Here is a simple maxima program corresponding to the 2 state, 2 transition case.

<<maxima>>=
/* the matrix exponential itself */
tmat : matrix([-a,a], [b,-b]);
etmat: matrixexp(tmat, t);

d1:  a+b;
e1 : exp(-d1*t);
test: matrix([(a*e1 +b)/d1, (a-a*e1)/d1], [(b-b*e1)/d1, (a+b*e1)/d1]);
expand(test- etmat);  /* should be all zeros */

deriv1a: diff((b + a*e1)/d1, a);
test: e1*(1-a*t)/d1 - (a*e1 +b)/d1^2;
expand(test - deriv1a);  /* should print a 0 */

deriv2a: diff((a-a*e1)/d1, a);
deriv3a: diff((b-b*e1)/d1, a);
deriv4a: diff((a+ b*e1)/d1, a);

deriv1b: diff((b + a*e1)/d1, b);
deriv2b: diff((a-a*e1)/d1, b);
deriv3b: diff((b-b*e1)/d1, b);
deriv4b: diff((a+ b*e1)/d1, b);
@ 

Since the starting matrix $A$ is a transtion matrix, exp(At) must always have
row sums of 1.  (Row $k$ is the probability distribution, post transition, of
those who start in state $k$: everyone has to go somewhere.)
For the same reason, the row sums of the derivatives must always be 0: if more
go to one place then fewer go to another.  
This can act as a check on our algebra.

<<sexpm>>=
#Functions to create the matrix exponential and it's derivative
sexpm <- list(
    <<dexp2>>
    <<dexp3>>
    <<dexp4>>
    <<dexp5>>
    )
@ 

The simplest case of two states and one or 2 transitions.
<<dexp2>>=
d2a= list(nstate =2, nonzero=3,
          # 2 states 1 transition
          #  -a   a
          #   0   0
          mexp = function(tmat, time, eps=1e-8) {
              a <- tmat[1,2]
              if (a < eps)  # no events
                  matrix(c(1,0,0,1), 2, 2)
              else {
                  e1 <- exp(-time * a)
                  matrix(c(e1, 0, 1-e1, 1), 2,2)
              }
          },
          deriv = function(tmat, time, eps= 1e-8) {
              if (tmat[1,2] < eps) array(0, dim=c(3,3,1))
              else {
                  d1 <- time *exp(-time*tmat[1,2])
                  array(c(-d1, 0, d1, 0), dim=c(2,2,1))
              }
          }
          ),

d2b = list(nstate=2, nonzero=2:3,
     # 2 states, 2 transitions
     #   -a  a
     #    b -b
     mexp = function(tmat, time, eps= 1e-8) {
         a <- tmat[1,2]; b <- tmat[2,1]
         d1 <- a+b
         if (d1< eps) 
             matrix(c(1,0,0,1), 2, 2)
         else {
             e1 <- exp(-d1*time)
             matrix(c(b + a*e1, 
                      b - b*e1, 
                      a - a*e1, 
                      a + b*e1), 2, 2)/d1
 
         }
     },
     deriv = function(tmat, time, eps = 1e-8) {
         a <- tmat[1,2]; b <- tmat[2,1]
         d1 <- a+b
         if (d1 < eps) array(0, c(2,2,2))
         else {
             e1 <- exp(-d1*time)
             partial.a <- c(e1*(1-a*time)/d1 - (a*e1 + b)/d1^2,
                            (b/d1)*(time*e1 - (1-e1)/d1),
                            (1 + a*time*e1 -e1)/d1 -a*(1-e1)/d1^2,
                            -(b/d1)*(time*e1 - (1-e1)/d1))
             partial.b <- c(-(a/d1)*(time*e1 - (1-e1)/d1),
                            (1+ b*time*e1 - e1)/d1 - b*(1-e1)/d1^2,
                            (a/d1)*(time*e1 - (1-e1)/d1),
                            b*(1-e1)/d1^2 - (1+ b*time*e1 - e1)/d1)
             array(c(partial.b, partial.a), dim=c(2,2,2))
         }
     }
),
@ 

Competing risks for 3, 4 and 5 states.  Here is the analytic form
for 4 states, the others are similar.

\begin{eqnarray}
  A& = \left( \begin{array}{cccc}
    -(a+b+c) & a & b & c \\ 0& 1 & 0 & 0 \\0& 0 & 1 & 0 \\ 0 &0 &0 &1 \\
    \end{array} \right) \\
  exp(At) &= \left( \begin{array}{cccc}
    e^{-(a+b+c)t} & a(1- e^{-(a+b+c)t})/(a+b+c) &   
    b(1- e^{-(a+b+c)t})/(a+b+c)& c(1- e^{-(a+b+c)t})/(a+b+c) \\
    0 &1 &0 &0 \\ 0 &0 &1 &0 \\ 0 &0 &0 &1 \\
  \end{array} \right)
\end{eqnarray}

  
<<dexp3>>=
# 3 states, 2 transitions, competing risks
# -(a+b)  a   b
#   0     0   0
#   0     0   0
d3a = list(nstate =3, nonzero=c(4,7),
           mexp = function(tmat, time, eps= 1e-8) {
               d1 <- tmat[1,2] + tmat[1,3]
               if (d1< eps) diag(3)
               else {
                   e1 <- exp(-time* d1)
                   e2 <- (1-e1)/d1
                   matrix(c(e1   ,        0, 0, 
                            tmat[1,2]*e2, 1, 0,
                            tmat[1,3]*e2, 0, 1), 3, 3)
               }       
           },  
           deriv = function(tmat, time, eps= 1e-8) {
               d1 <- tmat[1,2] + tmat[1,3]
               if (d1 < eps) array(0, dim=c(3,3,2))
               else {
                   a <- tmat[1,2]; b <- tmat[1,3];
                   e1 <- exp(-d1* time)
                   e2 <- (1-e1)/d1
                   temp1 <- c(-time*e1, (1+ a*time*e1 - e1)/d1 + a*(e1-1)/d1^2,
                              (b/d1)*(time*e1 + (e1-1)/d1))
                   temp2 <- c(-time*e1, (a/d1)*(time*e1 + (e1-1)/d1),
                              (1 + b*time*e1 -e1)/d1 + b*(e1-1)/d1^2)
                   dmat <- array(0, dim=c(3,3,2))
                   dmat[1,,1] <- temp1
                   dmat[1,,2] <- temp2
                   dmat
               }
           }
           ),

# 4 states 3 transitions, competing risks
d3b = list(nstate=4, nonzero=c(5,9,13),
     mexp = function(tmat, time, eps=1e-8) {
         d1 <- tmat[1,2] + tmat[1,3] + tmat[1,4]
         if (d1< eps) diag(4)
         else {
             e1 <- exp(-d1*time)
             temp <- c(e1, 0, 0, 0, 
                       tmat[1,2]*(1-e1)/d1, 1, 0, 0,
                       tmat[1,3]*(1-e1)/d1, 0, 1, 0,
                       tmat[1,4]*(1-e1)/d1, 0, 0, 1)
             matrix(temp, 4, 4)
         }
     },
     deriv = function(tmat, time, eps= 1e-8) {
         r1 <- tmat[1,2]; r2 <- tmat[1,3]; r3 <- tmat[1,4]
         d1 <- r1+r2+r3
         if (d1 < eps) array(0, dim=c(4,4,3))
         else {
             e1 <- exp(-time*d1)
             temp <- (time*e1 + (e1-1)/d1)/d1
             temp1 <- c(-time*e1, 
                        r1*temp + (1-e1)/d1,
                        r2*temp,
                        r3*temp)
             temp2 <- c(-time*e1,  
                        r1*temp,
                        r2*temp + (1-e1)/d1,
                        r3*temp)
             temp3 <- c(-time*e1,  
                        r1*temp,
                        r2*temp,
                        r3*temp + (1-e1)/d1)
             dmat <- array(0, dim=c(4,4,3))
             dmat[1,,1] <- temp1  # derivatives wrt r1
             dmat[1,,2] <- temp2  # derivatives wrt r2
             dmat[1,,3] <- temp3  # derivatives wrt r3
             dmat
         }
     }
     ),

# 5 states 4 transitions, competing risks
d3c = list(nstate=5, nonzero=c(6,11,16, 21),
     mexp = function(tmat, time, eps = 1e-8) {
         d1 <- tmat[1,2] + tmat[1,3] + tmat[1,4]+ tmat[1,5]
         if (d1< eps) diag(5)
         else {
             e1 <- exp(-d1*time)
             temp <- c(e1, 0, 0, 0, 0,
                       tmat[1,2]*(1-e1)/d1, 1, 0, 0, 0,
                       tmat[1,3]*(1-e1)/d1, 0, 1, 0, 0,
                       tmat[1,4]*(1-e1)/d1, 0, 0, 1, 0,
                       tmat[1,5]*(1-e1)/d1, 0, 0, 0, 1)
             matrix(temp, 5, 5)
         }
     },
     deriv = function(tmat, time, eps= 1e-8) {
         r1 <- tmat[1,2]; r2 <- tmat[1,3]; r3 <- tmat[1,4]; r4 <- tmat[1,5];
         d1 <- r1 + r2 + r3 + r4
         if (d1 < eps) return(array(0, dim=c(5,5,4)))

         e1 <- exp(-time*d1)
         temp <- (time*e1 + (e1-1)/d1)/d1
         temp1 <- c(-time*e1, 
                    r1*temp + (1-e1)/d1,
                    r2*temp, r3*temp, r4*temp)
         temp2 <- c(-time*e1, 
                    r1*temp,
                    r2*temp + (1-e1)/d1,
                    r3*temp, r4*temp)
         temp3 <- c(-time*e1,  
                    r1*temp, r2*temp,
                    r3*temp + (1-e1)/d1,  r4*temp)
         temp4 <- c(-time*e1,  
                     r1*temp, r2*temp, r3*temp,
                     r4*temp + (1-e1)/d1)
         dmat <- array(0, dim=c(5,5,4))
         dmat[1,,1] <- temp1
         dmat[1,,2] <- temp2
         dmat[1,,3] <- temp3
         dmat[1,,4] <- temp4
         dmat
     }
     ),
@ 

Sequential transtions for for 2,3,.. states, all connected to a terminal
death state.

<<dexp4>>=
# 2 + death
# -(a+b)  a   b
#   0    -c   c
d4a = list(nstate=3, nonzero = c(4, 7, 8),
           mexp = function(tmat, time, eps= 1e-8) {
               r1 <- tmat[1,2]; r2 <- tmat[1,3]; r3 <- tmat[2,3]
               d1 <- r3- (r1 + r2)
               e1 <- exp(-(r1 + r2)*time) 
               if (r1 + r2 + r3 < eps) diag(3)
               else if (r3 < eps) sexpm[["d3a"]]$mexp(tmat, time, eps)
               else if (abs(d1) < eps) {
                   matrix(c(e1, 0, 0, 
                            r1*time*e1, e1, 0,
                            1- e1*(1 + r1*time), 1- e1, 1), 3, 3)
               }
               else { # 99% of the calls
                   e2 <- exp(-r3*time)
                   matrix(c(e1, 0, 0,
                          r1*(e1 -e2)/d1, e2, 0,
                          (r2-r3)*e1/d1 +r1*e2/d1 + 1, 1-e2, 1), 3, 3)
               }
           },

           deriv = function(tmat, time, eps= 1e-8) {
               r1 <- tmat[1,2]; r2 <- tmat[1,3]; r3 <- tmat[2,3]
               d1 <- r3- (r1 + r2)
               e1 <- exp(-(r1 + r2)*time)               
               if (r1 + r2 + r3 < eps) array(0, dim=c(3, 3, 3))
               else if (r3 < eps)  sexpm["3a"]$deriv(tmat, time, eps)
               else if (abs(d1) < eps) {
                   temp1 <- c(-time* e1, 0, 0,
                              (e1-e2)*(1+ r1/d2)/d2 - r1*t*e1/d2, 0, 0,
                              r1*(e1-e2)/d2^2, 0, 0, 0)
                   temp2 <- c(-time*e1, 0, 0,
                              -a*time^2* e1, -time*e1,  0,
                              time*e1*(1 + time*r1), time*e1, 0)
                   temp3 <- temp1 + temp2  # r3  = r1 + r2 
                   array(c(temp1, temp2, temp3), dim=c(3,3,3))
               }
               else {
                   # this case should be 99% of the calls
                   e2 <- exp(-r3*time) 
                   temp1 <- matrix(c(-time*e1, 0, 0, 
                              (e1-e2)/d1 + r1*(e1-e2)/d1^2 - r1*time*e1/d1,
                              0, 0, 0, 0, 0), ncol=3)
                   temp1[,3] <- -rowSums(temp1)
                   temp2 <- matrix(c(-time*e1, 0, 0, 
                              r1*(e1-e2)/d1^2 - r1*time*e1/d1,
                              0, 0, 0, 0, 0), ncol=3)
                   temp2[,3] <- -rowSums(temp2)

                   temp3 <- matrix(c(0,0,0, 
                                     r1*(e2-e1)/d1^2 + r1*time*e2/d1, 
                                     -time*e2, 0, 0,0,0), ncol=3)
                   temp3[,3] <- -rowSums(temp3)
                   array(c(temp1, temp2, temp3), dim=c(3,3,3))
               }
           }
)

# 3 + death
# -(a+b)  a      0   b
#   0    -(c+d)  c   d  
#   0       0    -e  e
# Not filled it yet
@

Since the upper triangular method is also fast (any acyclic graph), the
competing risks and sequential solvers above were not critical.
More complex models like illness-death lead to very long code.



